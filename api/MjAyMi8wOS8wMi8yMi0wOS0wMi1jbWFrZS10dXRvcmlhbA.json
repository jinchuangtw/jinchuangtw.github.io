{"title":"使用 CMake 建置 OpenCV 專案","date":"2022-09-02T13:52:41.000Z","date_formatted":{"ll":"Sep 2, 2022","L":"09/02/2022","MM-DD":"09-02"},"thumbnail":"2022/09/02/22-09-02-cmake-tutorial/thumbnail.png","link":"2022/09/02/22-09-02-cmake-tutorial","comments":true,"tags":["Cmake","OpenCV"],"categories":["Programming"],"updated":"2022-09-02T15:47:38.420Z","content":"<p>簡單記錄一下 CMake 的基本使用方式與專案結構。</p>\n<span id=\"more\"></span>\n<h2 id=\"cmake-是什麼\">CMake 是什麼<a title=\"#cmake-是什麼\" href=\"#cmake-是什麼\"></a></h2>\n<p>CMake 是一個可以管理並建置程式專案的工具，直觀一點地說，它可以幫你引入程式需要的第三方函式庫，並連同專案內的 header files、source files 一起編譯出最終的執行檔。同時，CMake 也是 <a href=\"https://docs.opencv.org/4.x/db/df5/tutorial_linux_gcc_cmake.html\" target=\"_blank\">OpenCV 官方文件</a>中優先建議的編譯工具。用來設置 CMake 各項參數的檔案，就叫做 <code>CMakeLists.txt</code>，使用者必須根據自己的需求，把各個檔案的路徑寫在這裡面，告訴 CMake 程式檔案之間的關聯。</p>\n<h2 id=\"專案結構\">專案結構<a title=\"#專案結構\" href=\"#專案結構\"></a></h2>\n<p>參考<a href=\"https://github.com/gaoxiang12/slambook2\" target=\"_blank\">視覺SLAM十四講</a> Chapter 13 的內容，可以看到專案根目錄首先會有一個最主要的 <code>CMakeLists.txt</code>，而在 src、app、test 這三個資料夾底下也各有一個。另外，一些第三方函式庫的詳細引用方法，則定義在 <code>cmake_modules</code> 的 <code>.cmake</code> 檔案中。完整的專案結構如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project_root</span><br><span class=\"line\">          |-- app</span><br><span class=\"line\">          |    |-- CMakeLists.txt</span><br><span class=\"line\">          |    |-- run_kitti_stereo.cpp</span><br><span class=\"line\">          |-- config     </span><br><span class=\"line\">          |-- cmake_modules</span><br><span class=\"line\">          |             |-- FindCSparse.cmake</span><br><span class=\"line\">          |             |-- FindG2O.cmake</span><br><span class=\"line\">          |             |-- FindGlog.cmake</span><br><span class=\"line\">          |-- include/myslam</span><br><span class=\"line\">          |             |-- (... user header files ...)</span><br><span class=\"line\">          |-- src</span><br><span class=\"line\">          |    |-- CMakeLists.txt</span><br><span class=\"line\">          |    |-- (... user source files ...)</span><br><span class=\"line\">          |-- test</span><br><span class=\"line\">          |    |-- CMakeLists.txt</span><br><span class=\"line\">          |    |-- test_triangulation.cpp</span><br><span class=\"line\">          |-- CMakeLists.txt</span><br></pre></td></tr></table></figure>\n<p>由這個結構可以看出，使用者應將自己寫的 header files 放在 include 目錄中，並使用自定義的函式庫名稱作為子資料夾。而所有的 source files 則可以放在 src 目錄下。</p>\n<p>再來，test 和 app 目錄下則用來存放測試用的程式，以及專案的主程式。</p>\n<h2 id=\"cmake-設置常用語法\">CMake 設置常用語法<a title=\"#cmake-設置常用語法\" href=\"#cmake-設置常用語法\"></a></h2>\n<h3 id=\"cmake-專案設置\">CMake 專案設置<a title=\"#cmake-專案設置\" href=\"#cmake-專案設置\"></a></h3>\n<p>首先在根目錄中、最主要的那個 <code>CMakeLists.txt</code> 裡面，使用者必須先設定好版本與專案資訊。如果有將第三方函式庫的詳細引入方式寫成 <code>.cmake</code> 檔的話，可以註明那些檔案的位置。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(myslam)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_BUILD_TYPE Release) <span class=\"comment\"># Release / Debug，debug的話，編譯出的執行檔會跑得比較慢</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">list</span>(APPEND CMAKE_MODULE_PATH <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/cmake_modules) <span class=\"comment\"># .cmake 的路徑</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(EXECUTABLE_OUTPUT_PATH <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin) <span class=\"comment\"># 執行檔輸出路徑</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(LIBRARY_OUTPUT_PATH <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib) <span class=\"comment\"># 使用者函式庫編譯路徑</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"引入-opencv-等等第三方函式庫\">引入 OpenCV 等等第三方函式庫<a title=\"#引入-opencv-等等第三方函式庫\" href=\"#引入-opencv-等等第三方函式庫\"></a></h3>\n<p>再來，使用者可以透過 <code>find_package</code> 讓 CMake 自己尋找第三方套件的檔案路徑，並且用 <code>include_directories</code> 告訴 CMake 要把這些東西加到專案的 include 路徑裡面，這樣我們的程式就可以使用第三方的 functions。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># OpenCV</span></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(OpenCV <span class=\"number\">3.1</span> REQUIRED) <span class=\"comment\"># 也可以像這樣指定套件版本</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(THIRD_PARTY_LIBS <span class=\"variable\">$&#123;OpenCV_LIBS&#125;</span>) <span class=\"comment\"># 把多個第三方函示庫的路徑整理在一起，統稱 THIRD_PARTY_LIBS</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"引入使用者自己的函式庫\">引入使用者自己的函式庫<a title=\"#引入使用者自己的函式庫\" href=\"#引入使用者自己的函式庫\"></a></h3>\n<p>剛剛已經把專案底下使用者自己寫的 libraries 都放在 include 目錄下了，所以這邊只需要直接用 <code>include_directories</code> 把他們加進去就好。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"定義來源檔案路徑\">定義來源檔案路徑<a title=\"#定義來源檔案路徑\" href=\"#定義來源檔案路徑\"></a></h3>\n<p>在上一小節有提到來源檔案根據性質（是 libraries 還是主程式？）可以放在對應的資料夾中。這邊就運用 <code>add_subdirectory</code> 告訴 CMake 這些來源檔案的路徑。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(src)</span><br><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(<span class=\"keyword\">test</span>)</span><br><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(app)</span><br></pre></td></tr></table></figure>\n<h3 id=\"編譯函式庫\">編譯函式庫<a title=\"#編譯函式庫\" href=\"#編譯函式庫\"></a></h3>\n<p>使用者自己函式庫的來源檔案可以透過 <code>add_library</code> 進行連結。如果這個函式庫也需要用到第三方函式庫的東西，可以再用 <code>target_link_libraries</code> 把它們連起來。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_library</span>(myslam SHARED <span class=\"comment\"># 使用者函式庫名稱與類型</span></span><br><span class=\"line\">        frame.cpp</span><br><span class=\"line\">        mappoint.cpp</span><br><span class=\"line\">        map.cpp</span><br><span class=\"line\">        camera.cpp</span><br><span class=\"line\">        config.cpp</span><br><span class=\"line\">        feature.cpp</span><br><span class=\"line\">        frontend.cpp</span><br><span class=\"line\">        backend.cpp</span><br><span class=\"line\">        viewer.cpp</span><br><span class=\"line\">        visual_odometry.cpp</span><br><span class=\"line\">        dataset.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(myslam</span><br><span class=\"line\">        <span class=\"variable\">$&#123;THIRD_PARTY_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"編譯主程式\">編譯主程式<a title=\"#編譯主程式\" href=\"#編譯主程式\"></a></h3>\n<p><code>add_executable</code> 可以告訴 CMake 要根據誰產生執行檔，以及執行檔要叫什麼名字。主程式裡面用到的所有函式庫則可以一次用 <code>target_link_libraries</code> 進行連結。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(run_kitti_stereo run_kitti_stereo.cpp) <span class=\"comment\"># 執行檔名稱 與 主程式檔名</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(run_kitti_stereo myslam <span class=\"variable\">$&#123;THIRD_PARTY_LIBS&#125;</span>) <span class=\"comment\"># 這個執行檔會用到的函式庫們</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"結語\">結語<a title=\"#結語\" href=\"#結語\"></a></h2>\n<p>假設專案非常簡單，使用者其實只需要一個 <code>CMakeLists.txt</code> 就可以搞定所有設置，但是，實務上的大型專案往往包括許多使用者自己寫的函式庫與多個程式，如同這次的範例，我們可以利用模組化的方式來進行 CMake 連結，也更好進行檔案管理。至於這次沒有寫到的測試檔案設置方式，就等日後有需要用到時再進行研究補充。</p>\n<p>Thumbnail photo from <a href=\"https://unsplash.com/photos/ZiQkhI7417A\" target=\"_blank\">Unsplash</a></p>\n","prev":{"title":"ORB-SLAM2 Test Log (With KITTI Dataset on ROS)","link":"2022/10/28/22-10-28-ORBSLAM2-Test-log"},"next":{"title":"Leetcode - 9. Palindrome Number","link":"2022/08/19/22-08-19-leetcode-009"},"plink":"https://jinchuangtw.github.io/2022/09/02/22-09-02-cmake-tutorial/","toc":[{"id":"cmake-是什麼","title":"CMake 是什麼","index":"1"},{"id":"專案結構","title":"專案結構","index":"2"},{"id":"cmake-設置常用語法","title":"CMake 設置常用語法","index":"3","children":[{"id":"cmake-專案設置","title":"CMake 專案設置","index":"3.1"},{"id":"引入-opencv-等等第三方函式庫","title":"引入 OpenCV 等等第三方函式庫","index":"3.2"},{"id":"引入使用者自己的函式庫","title":"引入使用者自己的函式庫","index":"3.3"},{"id":"定義來源檔案路徑","title":"定義來源檔案路徑","index":"3.4"},{"id":"編譯函式庫","title":"編譯函式庫","index":"3.5"},{"id":"編譯主程式","title":"編譯主程式","index":"3.6"}]},{"id":"結語","title":"結語","index":"4"}],"copyright":{"author":"Jin Chuang","link":"<a href=\"https://jinchuangtw.github.io/2022/09/02/22-09-02-cmake-tutorial/\" title=\"使用 CMake 建置 OpenCV 專案\">https://jinchuangtw.github.io/2022/09/02/22-09-02-cmake-tutorial/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"1127 words in 8 min"}