{"title":"Neovim 高效開發環境：配置心得與分享","date":"2022-08-05T06:59:34.000Z","date_formatted":{"ll":"Aug 5, 2022","L":"08/05/2022","MM-DD":"08-05"},"thumbnail":"2022/08/05/22-08-05-neovim-tutorial/coding.jpg","link":"2022/08/05/22-08-05-neovim-tutorial","tags":["neovim","workflow"],"categories":["Programming"],"updated":"2022-08-15T07:38:30.013Z","content":"<p><code>10dd</code> 一次刪除 10 行、<code>yG</code> 複製至檔案末端 … 是時候挑戰這個神秘古老的編輯器了。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>點擊畫面右下角選單可以開啟目錄！</p>\n</blockquote>\n<h2 id=\"前言：為何不使用現成的-ide\">前言：為何不使用現成的 IDE<a title=\"#前言：為何不使用現成的-ide\" href=\"#前言：為何不使用現成的-ide\"></a></h2>\n<p>在這個人人學程式的時代，集成式開發環境（Integrated Development Environment, <strong>IDE</strong>）往往是入門者寫程式的首選，其直覺化的圖形介面、便捷的程式庫引入方式，可以讓使用者免於繁複的設定，只需專注學習程式的概念以及語法 —— 例如我在大學修 C、C++ 時常用的 <a href=\"https://visualstudio.microsoft.com/zh-hant/\" target=\"_blank\">Visual Studio</a>，抑或是 Python 專用的 <a href=\"https://www.jetbrains.com/pycharm/\" target=\"_blank\">PyCharm</a> 等。</p>\n<p>然而，此類 IDE 往往有著以下顯著的缺點：</p>\n<ul>\n<li>軟體檔案肥大，佔據電腦大量儲存空間\n<blockquote>\n<p>相對輕量化的開源 IDE 如：<a href=\"http://www.bloodshed.net\" target=\"_blank\">Dev-C++</a>，是我八年前（欸？）最喜歡的編輯器，可惜作者已不再更新、維護</p>\n</blockquote>\n</li>\n<li>啟動速度慢，而且當你裝了越多插件，就又更慢</li>\n<li>介面充滿花花綠綠的按鈕與各種複雜的 panels，壓縮程式碼的編輯空間，換言之就是很醜（主觀發言）</li>\n</ul>\n<p>另外，不同於龐大精密的 IDE，近年備受開發者青睞的 <a href=\"https://code.visualstudio.com\" target=\"_blank\">Visual Studio Code</a> 與 <a href=\"https://atom.io\" target=\"_blank\">Atom</a> 這類現代化文字編輯器，則可以透過自行安裝的插件來滿足各式使用需求，不論是不同程式語言的開發，或是 tex、markdown 等等文件編輯，都可以在插件市集中找到支援。</p>\n<p>不過，在文字編輯器的領域，依然存在著一個神秘古老的選擇，從未離開人們的視野… <strong>對，那就是 Vim</strong>。兼具超輕量化、跨平台通用性（Linux, macOS, WSL）、100% 可自定義的功能以及<s>讓你可以就此丟掉滑鼠的</s>快捷鍵組合，使得 Vim 成為一套讓使用者「越用越順手」的開發環境。若再搭配 tmux 使用，更可以使整個終端機工作的效率達到最大值。</p>\n<blockquote>\n<p><a href=\"https://youtu.be/k2h7usLLBhY\" target=\"_blank\">https://youtu.be/k2h7usLLBhY</a><br>\n推我入坑的最大契機：Neovim + tmux = 超級順暢的 workflow！(<em>How to build a smoothly animated ToDo app with React Native, Expo, Reanimated, NativeBase, and Moti</em> – devaslife@YouTube)</p>\n</blockquote>\n<p>本文使用的 Neovim 則是源自 Vim 的分支版本。不同於 Vim 只由一位主要開發者進行所有 pull requests 的管理，Neovim 的開發社群相對龐大，因此在新功能的增添上更為活絡。我在這篇文章中的配置方式參考了<a href=\"https://juejin.cn/book/7051157342770954277\" target=\"_blank\">這篇教學</a>，作者對 Neovim 的配置概念與步驟做了非常詳細的說明。</p>\n<h2 id=\"一、neovim-基礎安裝與環境配置\">一、Neovim 基礎安裝與環境配置<a title=\"#一、neovim-基礎安裝與環境配置\" href=\"#一、neovim-基礎安裝與環境配置\"></a></h2>\n<p>Neovim 的安裝非常簡單，可以直接透過 <code>apt</code> 或 <code>brew</code> 之類的套件管理器完成。例如：<br>\n<code>macOS</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install neovim --HEAD</span><br></pre></td></tr></table></figure>\n<p><code>Linux</code> / <code>WSL</code> 的話是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install neovim</span><br></pre></td></tr></table></figure>\n<p>另外，我們還會需要一個可以正常顯示 nerd 字符的環境。不同於各平台終端機內建的字型，nerd-font 的好處是支援各種圖形符號，可以讓我們的 UI 更為美觀直覺。我在 <code>WSL</code> 用的終端機是 <a href=\"https://tabby.sh\" target=\"_blank\">Tabby</a>，<code>macOS</code> 則是 <a href=\"https://iterm2.com\" target=\"_blank\">iTerm2</a>，這些終端機都可以支援 nerd-font。</p>\n<p>Nerd-font 有非常多種字型可以選擇，我自己是用這些：</p>\n<ul>\n<li><a href=\"https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf\" target=\"_blank\">MesloLGS NF Regular.ttf</a></li>\n<li><a href=\"https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf\" target=\"_blank\">MesloLGS NF Bold.ttf</a></li>\n<li><a href=\"https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf\" target=\"_blank\">MesloLGS NF Italic.ttf</a></li>\n<li><a href=\"https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf\" target=\"_blank\">MesloLGS NF BoldItalic.ttf</a></li>\n</ul>\n<h2 id=\"二、配置文件架構\">二、配置文件架構<a title=\"#二、配置文件架構\" href=\"#二、配置文件架構\"></a></h2>\n<p>Neovim 跟 Vim 比較不一樣，使用者必須在自己的家目錄底下建立 <code>.config/nvim</code> 路徑，並把所有相關配置文件都放到裡面。每次打開 Neovim，它都會自動執行 <code>init.lua</code> 這個入口文件，把裡面所有設定都跑一遍。</p>\n<p>這些檔案的架構大概會是這個樣子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/.config/nvim</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |--- init.lua # 入口文件</span><br><span class=\"line\">    |--- lua</span><br><span class=\"line\">    |     |--- basic.lua # 顯示與 Neovim 基本設定</span><br><span class=\"line\">    |     |--- keybingings.lua # 快捷鍵自定義</span><br><span class=\"line\">    |     |--- colorscheme.lua # 外觀主題</span><br><span class=\"line\">    |     |--- plugins.lua # 管理所有插件的安裝</span><br><span class=\"line\">    |     |--- plugin-config</span><br><span class=\"line\">    |     |          |--- # ... 插件各自的配置</span><br><span class=\"line\">    |     | </span><br><span class=\"line\">    |     |--- lsp</span><br><span class=\"line\">    |     |     |--- # ... lsp server 各自的配置</span><br></pre></td></tr></table></figure>\n<p>將各個插件的配置以模組概念分開來的好處是，當你某一天想要關閉某個插件時，只需要把入口文件中引入那個插件的一行 code 註解掉就可以了。</p>\n<h2 id=\"三、插件-&amp;-我的配置分享\">三、插件 &amp; 我的配置分享<a title=\"#三、插件-&amp;-我的配置分享\" href=\"#三、插件-&amp;-我的配置分享\"></a></h2>\n<p>在插件管理上，我用的是 <a href=\"https://github.com/wbthomason/packer.nvim\" target=\"_blank\">packer.nvim</a>，先把這個管理器安裝好之後，只要把所有想安裝的插件列在 <code>plugins.lua</code>，然後執行 <code>:PackerSync</code> 就可以了。另外，如果是要把 Neovim 拿來寫 code，不外乎還會需要以下這些功能：</p>\n<ul>\n<li>語法高亮</li>\n<li>自動補全</li>\n<li>Code 自動排版</li>\n<li>模糊搜索</li>\n<li>檔案管理介面</li>\n</ul>\n<p>詳細相關的插件，可以參考<a href=\"https://github.com/jinchuangtw/nvim\" target=\"_blank\">我的 Neovim 配置文件</a>，由於我主要是打算拿來寫 <code>c</code>、<code>cpp</code>、<code>python</code>、<code>tex</code> 還有 <code>markdown</code>，所以如果還需要寫其他語言，就必須安裝相對應的 LSP server，才能實現自動補全功能。各語言可用的 server 可以參考 <a href=\"https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md\" target=\"_blank\">nvim-lspconfig 的說明文件</a>。Code 自動排版的部分則可以參考 <a href=\"https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/doc/BUILTINS.md\" target=\"_blank\">null-ls 的 built-in sources</a>，注意在配置好之後，也要安裝各語言自動排版的套件，null-ls 才可以去 call 它。</p>\n<p>例如我看到 null-ls 可以用 <code>clang-format</code> 這個 command 去排版 <code>c</code> 跟 <code>cpp</code>，</p>\n<img src=\"/2022/08/05/22-08-05-neovim-tutorial/null-ls-example.png\" class=\"\" title=\"Example\">\n<p>那我就知道我必須另外安裝 <code>clang-format</code>，以此類推。</p>\n<hr>\n<p>透過這次下定決心把 Neovim 配起來，終於可以在全 terminal 環境下作業了！完全不用伸手碰滑鼠就是爽(=´∀｀)人(´∀｀=)</p>\n<img src=\"/2022/08/05/22-08-05-neovim-tutorial/demo.png\" class=\"\" title=\"demo\">\n<p><font color='#969696'>用 Neovim 搭配 tmux 的多開方法，左邊編輯，右邊開 server，即時查看渲染結果。</font></p>\n","plink":"https://jinchuangtw.github.io/2022/08/05/22-08-05-neovim-tutorial/","toc":[{"id":"前言：為何不使用現成的-ide","title":"前言：為何不使用現成的 IDE","index":"1"},{"id":"一、neovim-基礎安裝與環境配置","title":"一、Neovim 基礎安裝與環境配置","index":"2"},{"id":"二、配置文件架構","title":"二、配置文件架構","index":"3"},{"id":"三、插件-&-我的配置分享","title":"三、插件 &amp; 我的配置分享","index":"4"}],"copyright":{"author":"Jin Chuang","link":"<a href=\"https://jinchuangtw.github.io/2022/08/05/22-08-05-neovim-tutorial/\" title=\"Neovim 高效開發環境：配置心得與分享\">https://jinchuangtw.github.io/2022/08/05/22-08-05-neovim-tutorial/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"1430 words in 10 min"}